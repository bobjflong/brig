(Do

  {{{ config }}}

  (display-version)

  (Func display x) (Do (Show x) )

  (Func create-file name)
    (Do
      (exit-if-null name "No file name given")
      (newline)
      (Show (cat "Creating: " name))
      (create-timestamped-file name))

  (Func create-regex-from args)
    (Do
      (Let search-terms (. (Cons :drop 1) arg))
      (Let search-terms (. (Cons :join "\-") search-terms))
      (. (Cons :new search-terms) :Regexp))

  (Func get-posts void)
    (Do
      (Send
        (Cons :split (Send :chr 10))
        (Send (Cons "`" "ls -t posts/* 2> /dev/null ") :Kernel)))

  (Func find-from-args args)
    (Do
      (Let regex (Call create-regex-from args))
      (Func matching val ~(regex))
        (Do
          (. (Cons :match regex) val))

      (Call filter matching (Call get-posts void)))

  (Func perform-search args)
    (Do
      (Let found (Call find-from-args args))
      (newline)
      (Show (cat "Found: " (. :to_s (. :length found))))
      (Call map display found)
      (newline))

  (Func edit-file args)
    (Do

      (LetMany (found (Call find-from-args args))
               (editor-cmd (cat editor " ")))

      (Func open-editor post ~(editor-cmd))
        (Do
          (Let cmd (cat editor-cmd post))
          (. (Cons :system cmd) :Kernel))

      (Call map open-editor found))

  ; Print out a list of posts currently stored
  (Func get-list-of-posts void)
    (Do
      (Func get-name f)
        (Do
          ((-> (Cons :join "-") (Cons :[] (. (Cons :new (Cons 0 (- 0 2))) :Range))
            (Send (Cons :split "-") f))))

      (Let posts (Call get-posts void))

      (newline)
      (Call map display (Call map get-name posts))
      (newline))

  (Func open-editor void)
    (Do
      (. (Cons :system editor) :Kernel))

  (Func generate-previous-page-link page-number)
    (Do
      (If (= page-number 0)
        ""
        (If (= page-number 1)
          "index.html"
          (cat (. :to_s (- page-number 1)) ".html"))))

  (Func generate-next-page-link page-number max)
    (Do
      (If (= page-number max)
        ""
        (cat (. :to_s (+ page-number 1)) ".html")))

  (Func create-link to name)
    (Do
      (If (not (= to ""))
        (cat
          (cat "<a href=\'" to)
          (cat "\'>"
            (cat name "</a>")))
        ""))

  (Func create-render-hash-for-page html page-number max)
    (Do
      (Let render-hash (. :new :Hash))
      (add-to-hash render-hash "yield" html)
      (add-to-hash render-hash "prev_page"
        (Call create-link
          (Call generate-previous-page-link page-number)
          "< prev"))
      (add-to-hash render-hash "next_page"
        (Call create-link
          (Call generate-next-page-link page-number max)
          "next >"))
      (render-hash))

 ; =======================================================================
 ; create-html-page
 ; given:
 ; page - the name of the post
 ; html - the html content to be written
 ; page-number - the number of the current page (used for pagination)
 ; the max number of pages (used to generate next link)
 ;========================================================================
  (Func create-html-page page html page-number max)
    (Do
      ;Load the layout.html
      (Let layout
        (.(Cons :read template-location) :File ))

      ; Process the template page by passing in the html content and pagination links
      ; These are stored in the render hash as keys: yield, next_page, prev_page
      (Let processed
        (fill-tag (Call create-render-hash-for-page html page-number max) in layout))

      (. (Cons :write (Cons page processed)) :File)
      (newline)
      (Show (cat "Built: " page)))

  (Func zip-with left right)
    (Do
      (Let zip-instr (Cons "zip" (Cons right (empty-list))))
      (. zip-instr left))

  (Func create-linkable-file arg)
    (Do
      (Let posts arg)

      (Func create-page posts)
        (Do
          (LetMany
            (post (Car posts))
            (name (Car post))
            (content (Car (Cdr post))))
          (Call create-html-page (Call create-file-name-for-permalink name) content 0 0)
          (If (Cdr posts) (RecCall create-page (Cdr posts)) null))

      (Call create-page posts))

  (Func create-file-name-for-permalink name)
    (Do
      (cat "./site/"
        (cat name ".html")))

  (Func create-file-name-for-paginated i)
    (Do
      (Let file-name
        (If (= i 0)
          "./site/index.html"
          (cat (cat "./site/" (. :to_s i)) ".html"))))

  (Func combine-string-list items)
    (Do (. (Cons :join "") items))

  (Func create-posts-html void)
    (Do
      (Let posts
        (.
          (Cons :each_slice page-size)
          (Call get-posts void)))

      (LetMany
        (posts (. :to_a posts))
        (number-of-pages (. :length posts))
        (i 0))

      (Func name-and-render posts i)
        (Do
          ; Grab the current file name --- render it, and name it.
          (LetMany
            (current-page (Car posts))
            (pages-rendered (Call map post-to-html current-page))
            (file-name (Call create-file-name-for-paginated i)))
          ; Write out the linkable page
          (Call create-linkable-file (Call zip-with current-page pages-rendered))
          ; Build the file by joining everything that has been rendered for this page
          (Call create-html-page file-name
            (Call combine-string-list pages-rendered)
            i
            (- number-of-pages 1 ))

          (If (Cdr posts) (RecCall name-and-render (Cdr posts) (+ i 1)) null))

      (Call name-and-render posts i))

  (Func view void)
    (Do
      (.
        (Cons :system server-cmd)
        :Kernel))

  (Func timestamp-for-post post)
    (Do
      (Let file (Send (`(:new  post)) :File))
      (->
        "iso8601"
        :utc
        :ctime
        file))

  (Func create-render-hash-for-post post)
    (Do
      (Let render-hash (. :new :Hash))
      (add-to-hash render-hash "link"
        (cat "/site/"
          (cat post ".html")))

      (add-to-hash render-hash "updated"
        (Call timestamp-for-post post))
      
      (render-hash))

  (Func post-to-html post)
    (Do
      (Let redcloth
        (.
          (Cons :read post)
          :File))
      
      (Let tags (Call create-render-hash-for-post post))
      (Let redcloth (fill-tag tags in redcloth))

      (Let rc (. (Cons :new redcloth) :RedCloth))
      (cat "<article>" (cat (. :to_html rc) "</article>")))

  (Func build void)
    (Do
      (LetMany
        (posts (Call get-posts void))
        (html-list (Call map post-to-html posts)))

      (. (Cons :join "") html-list))

  (Func dispatch cmd)
    (Do
      (case (. :to_s cmd)
        ("new"
          (Call create-file (get-entered-name))
        )
        ("list"
          (Call get-list-of-posts void)
        )
        ("editor"
          (Call open-editor void)
        )
        ("edit"
          (Call edit-file arg)
        )
        ("search"
          (Call perform-search arg)
        )
        ("publish"
          (Call publish void)
        )
        ("build"
          (Call create-posts-html void)
        )
        ("view"
          (Call view void)
        )))

  (Call dispatch (arg 0))

)
